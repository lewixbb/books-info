!function(e){"use strict";var r,l=window.angular,c={signOutUrl:"/api/users/sign-out",signInUrl:"/api/users/sign-in",updateUrl:"/api/session",cache:!1};var s=["ngSession",function(e){return e.resolve()}];var n={configure:function(e){l.isString(e.updateUrl)&&(c.updateUrl=e.updateUrl),l.isString(e.signInUrl)&&(c.signInUrl=e.signInUrl),l.isString(e.signOutUrl)&&(c.signOutUrl=e.signOutUrl),(l.isNumber(e.cache)||"boolean"==typeof e.cache)&&(c.cache=e.cache)},$get:["$rootScope","$http","$q",function(s,t,i){function u(e,n){return n||(n=i.defer()),t.get(c.updateUrl,e).then(function(e,n){s.session.user=n.data,r=new Date,e.resolve(n)}.bind(null,n),n.reject),n.promise}function o(e){var n=s.session;return n?e&&n.user?n.user[e]:n.user:null}return s.session={},{hasRole:function(e,n){var r=o("roles"),s=0;if(!r||!r.length)return!1;l.isString(r)&&(r=[r]),l.isString(e)&&(e=[e]);for(var t=0,i=e.length;t<i;t++)-1<r.indexOf(e[t])&&s++;return n?s===e.length:!!s},signOut:function(e,n){var r=i.defer();return t.post(c.signOutUrl,e,n).then(function(e,n){s.session.user=null,e.resolve(n)}.bind(null,r),r.reject),r.promise},resolve:function(){if(l.isDate(r)){if("boolean"==typeof c.cache&&c.cache)return i.resolve();if(l.isNumber(c.cache)&&r.valueOf()+c.cache>Date.now())return i.resolve()}return u()},signIn:function(e,n){var r=i.defer();return s.session.user=null,t.post(c.signInUrl,e,n).then(function(e){return u(null,e)}.bind(null,r),r.reject),r.promise},reload:function(e,n,r){return r||(r=i.defer()),t.put(c.updateUrl,e,n).then(u.bind(null,n,r),r.reject),r.promise},update:u,user:o,get:function(e){return s.session[e]},set:function(e,n){s.session[e]=n},del:function(e){delete s.session[e]}}}]};l.module("ngSession",[]).provider("ngSession",function(){return n}).run(["$route",function(e){for(var n in e.routes){var r=e.routes[n];l.isObject(r.resolve)||(r.resolve={}),r.resolve._session=s}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
